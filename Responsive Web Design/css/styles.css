
/*Time to style your table. Start by resetting the box model. Create an html selector and give it a box-sizing 
property set to border-box.*/

html {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  color: #0a0a23;
  height: 200vw;
}


/*The CSS you are about to write is a common set of properties used to ensure elements are completely hidden visually.*/
span[class~="sr-only"] {/*The span[class~="sr-only"] selector will select any span element whose class includes sr-only.*/
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important; /*The CSS clip property is used to define the visible portions of an element*/

  clip-path: inset(50%) !important; /*The clip-path property determines the shape the clip property should take. Set the clip-path 
  property to the value of inset(50%), forming the clip-path into a rectangle within the element*/


  /*Now you need to size these elements down. Give your span[class~="sr-only"] selector a width and height property set 
  to 1px.*/
  width: 1px !important;
  height: 1px !important;


  /*
  To prevent the text content from overflowing, give your span[class~="sr-only"] selector an overflow property set to 
  hidden and a white-space property set to nowrap.*/

  overflow: hidden !important;
  white-space: nowrap !important;



  /*
  Finally, you need to take these hidden elements out of the document flow. Give the span[class~="sr-only"] selector a 
  position property set to absolute, a padding property set to 0, and a margin property set to -1px. This will ensure 
  that not only are they no longer visible, but they are not even within the page view
  */

  position: absolute;
  padding: 0 !important;
  margin: -1px !important;

  /*
  "!important" it tells the browser that this values are important and has to bee kept
  just like they are, even if there are make changes of all the span's elements
  example:

  span {
    position: relative; - it would not be taken in consideration in this selector and will
    be applied only to the rest of the span elements  (because in my selector this value is marked as important).

  */
}

h1 {
  max-width: 37.25rem;
  margin: 0 auto;
  padding: 1.5rem 1.25rem;
}



/*
Target your flex container with an h1 .flex selector. Give it a display property set to flex to enable the flexbox layout. 
Then set the flex-direction property to column-reverse - this will display the nested elements from bottom to top. Finally, 
set the gap property to 1rem to create some space between the elements.
*/
h1 .flex {
  display: flex;
  flex-direction: column-reverse;
  gap: 1rem;
}


/*
The :first-of-type pseudo-selector is used to target the first element that matches the selector. Create an 
h1 .flex span:first-of-type selector to target the first span element in your .flex container.
*/

h1 .flex span:first-of-type { /*Remember that your span elements are reversed, visually, so this will appear to be the second 
                                element on the page*/
  font-size: 0.7em;


}




/*The :last-of-type pseudo-selector does the exact opposite - it targets the last element that matches the 
selector*/

h1 .flex span:last-of-type {
 font-size: 1.2em;
}


/*
Create a section selector, and give it a max-width property set to 40rem for responsive design
*/

section {
  max-width: 40rem;
  margin: 0 auto;
  border: 2px solid #d0d0d5;
}



/*
Create a #years selector, and enable flexbox. Justify the content to the end of the flex direction, 
and make the element sticky. Fix it to the top of its container with top: 0
*/

#years {
  display: flex;
  justify-content: flex-end;
  position: -webkit-sticky;
  position: sticky;
  top: 0;

  /*
  Applying some color to the years element: Make the text #fff and the background #0a0a23
  */

  background-color: #0a0a23;
  color: #fff;

  /*
    The calc() function is a CSS function that allows you to calculate a value based on other 
    values. 
    For example, you can use it to calculate the width of the viewport minus the margin of an 
    element:

    .example {
      margin: 10px;
      width: calc(100% - 20px);
    }

  */
  
  margin: 0 -2px;
  padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;

  /*
  Adding position sticky moved the element into its own stack. To ensure your #years element 
  does not get hidden by different stacks, add a z-index property set to 999
  */
  z-index: 999;

}


/*
#years span[class] - target all the span elements in this parent element that has a class 
attribute set no matter the attribute's value.

The span[class] syntax will target any span element that has a class attribute set, regardless 
of the attribute's value.
*/

#years span[class] {
  font-weight: bold;
  width: 4.5rem;
  text-align: right;
}



.table-wrap {
  padding: 0 0.75rem 1.5rem 0.75rem;
}


/*
Because I've marked what was important as a value for me on the others elements
I can remove de :not() pseudo-class and I can applied to all the span elements the same 
font-weight: normal;


span:not(.sr-only) { /*The :not() pseudo-selector is used to target all elements that do not match 
  the selector - in this case, any of your span elements that do not have the sr-only class. This 
  ensures that your earlier rules for the span[class~="sr-only"] selector are not overwritten
  
  font-weight: normal;

}

*/

/*
span {
  font-weight: normal; I've removed this styling because all my span elements have now a more complex
  styling.
}

*/

/*
border-collapse property set it to - collapse (mostly applied to the <table></table> elements), 
will allow cell borders to collapse into a single border, instead of a border around each cell. 
Also set the border property to 0 to hide the borders themselves.
*/

table {
  border-collapse: collapse;
  border: 0;
  width: 100%;
  position: relative;
  margin-top: 3rem;
}


table caption {
  color: #356eaf;
  font-size: 1.3em;
  font-weight: normal;
  position: absolute;
  top: -2.25rem;
  left: 0.5rem;
}


/*
Create a selector to target your td elements within your table body. Give them a width to fill the 
viewport, with a minimum and maximum of 4rem. This approach ensures that the width is fixed, whereas 
setting width specifically would allow the elements to shrink to the container
*/

tbody td {
  width: 100vw;
  max-width: 4rem;
  min-width: 4rem;
}


/*
This is how to give an element  a width of the entire container, less 12rem (calc(100% - 12rem);)
*/

tbody th {
  width: calc(100% - 12rem);
}


/*
The [attribute="value"] selector targets any element that has an attribute with a specific value
*/

tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

tr[class="total"] th{  /*
  Using the same selector syntax, target the th elements within your table rows where the class is 
  total.
  I target all the th elements from inside the tr elements with th class of total.
  */
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}

/*
The key difference between tr[class="total"] and tr.total is that the first will select tr elements 
where the only class is total. The second will select tr elements where the class includes total.
*/

tr.total td {
  /*
  tr.total will work I can use this selector to target all td elements within the class .total 
  rows
  */
  text-align: right;
  padding: 0 0.25rem;
}



/*
The :nth-of-type() pseudo-selector is used to target specific elements based on their order among 
siblings of the same type.

example:

  target the tr.total (with the class total) and I want the 3ed td element
  tr.total td:nth-of-type(3)
*/

tr.total td:nth-of-type(3) {
  padding: 0.5rem;
}

tr.total:hover{
  background-color: #99c9ff;
}


td.current {
  font-style: italic;
}



tr[class="data"] {
  background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}


/*
Select the th elements within your tr.data elements
*/

tr.data th {
  text-align: left;
  padding: 0.3rem 0 0 0.5rem;
}



/*
 a tr.data th .description selector  target the elements with the class set to description that are 
 within my th elements in your .data table rows.
*/

tr.data th .description {
  display: block;
  font-style: italic;
  font-weight: normal;
  padding: 1rem 0 0.75rem;
  margin-right: -13.5rem;
}




tr.data td {
  vertical-align: top;
  text-align: right;
  padding: 0.3rem 0.25rem 0;
}



/*
another selector for the td elements within your tr.data element, but specifically select the last one
*/
tr.data td:last-of-type {
  padding: 0.5rem;
}


