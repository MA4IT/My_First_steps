


/*
Clicking on the navigation links should jump the viewport to the relevant section. 
However, this jumping can be disorienting for some users.

Select all elements, and set the scroll-behavior to smooth.
*/



/*
The @media at-rule has a media feature called prefers-reduced-motion to set CSS based on the user's preferences. 
It can take one of the following values:

    reduce
    no-preference

    @media (feature: value) {
      selector {
        styles
      }
    }
Wrap the style rule that sets scroll-behavior: smooth within an @media at-rule with the media feature prefers-reduced-motion
having no-preference set as the value

*/

@media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
  }
}




body {
  background: #f5f6f7;
  color: #1b1b32;
  font-family: Helvetica;
  margin: 0;
}

header {
  width: 100%;
  height: 50px;
  background-color: #1b1b32;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  top: 0;
}

#logo {
  width: max(100px, 18vw);
  background-color: #0a0a23;
  aspect-ratio: 35 / 4;
  padding: 0.4rem;
}

h1 {
  color: #f1be32;
  font-size: min(5vw, 1.2em);
  text-align: center;
}



/*
Then, give the main padding such that the Student Info 
section header can be fully seen.

You should add a main selector to target the main element.  
*/

main {
  padding-top: 45px;
}




/*
On small screens, the unordered list in the navigation bar overflows the right side of the screen.

Fix this by using Flexbox to wrap the ul content. Then, set the following CSS properties to correctly align the text:

align-items: center;
padding-inline-start: 0;
margin-block: 0;
height: 100%
*/


nav > ul {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
  align-items: center;
  padding-inline-start: 0;
  margin-block: 0;
  height: 100%;
}



/*

Set the width of the section elements to 80% of their parent container. 
Then, use margins to center the section elements, adding 10px to the bottom margin.

Also, ensure the section elements cannot be larger than 600px in width

*/

section {
  width: 80%;
  max-width: 600px;
  text-align: center;
  margin: 0 auto 10px auto;
}




nav > ul >li {
  color: #dfdfe2;
  margin: 0 0.2rem;
  padding: 0.2rem;
  display: block;
}

li > a {
  color: inherit;
  text-decoration: none;
}

nav > ul >li:hover {
  background-color: #dfdfe2;
  color: #1b1b32;
  cursor: pointer;
}

/*

*/

h1, h2 {
  font-family: Verdana, Geneva, Tahoma, sans-serif;
}


/*Replace the top margin of the h2 elements with 60px of top padding*/

h2 {
  border-bottom: 4px solid #dfdfe2;
  margin-top: 0;
  padding-top: 60px;
}




/*
Add padding to the top and left of the .info elements, and 
set the other values to 0
*/

.info {
  padding: 10px 0 0 5px;
}

/*
Give the .formrow elements top margin, and left and right padding. 
The other padding values should be 0.

Then, increase the font size for all input elements.
*/


.formrow {
  margin: 10px 0 0 0 ;
  padding: 0 5px;
}

input {
  font-size: 18px;
}


/*
To make the first section look more inline, target only the input 
elements within .info elements, and set their width to 50%, and left-align their text.
*/

.info  input {
  width: 50%;
  text-align: left;
  outline: none;
}


/*
Target all label elements within .info elements, and set their width to 10%, and make it so 
they do not take up less than 55px*/

.info label {
  width: 10%;
  min-width: 55px;
  text-align: right;
}


/*
To align the input boxes with each other, create a new ruleset that targets all input and label 
elements within an .info element and set the display property to inline-block.

Also, align the label element's text to the right.
*/

.info > input, .info > label {
  display: inline-block;
}


/*
To neaten the .question-block elements, set the following CSS properties
*/


.question-block {
  text-align: left;
  display: block;
  width: 100%;
  margin-top: 20px;
  padding-top: 5px;
}


/*
Remove the border and bottom padding on the .question elements
*/

.question {
  border-style: none;
  padding: 0;
}


/*

Make the paragraph elements appear as a higher priority, with the following CSS properties

*/

p {
  font-size: 20px;
  margin-top: 5px;
  padding-left: 15px;
}





/*
While ul/li elements are great at providing bullets for list items, your radio buttons don't need them. 
You can control what the bullets look with the list-style property. For example you can turn your bullets into 
circles with the following:

ul {
  list-style: circle;
}
*/

.answers-list {
  list-style: none;
  padding: 0;
} 



/*To prevent unnecessary repetition, target the before 
pseudo-element of the p element, and give it a content property of 
"Question #"*/

p::before {
  content: "Question #";
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}


/*
button a freeCodeCamp-style design
*/

button {
  display: block;
  margin: 40px auto;
  width: 40%;
  padding: 15px;
  font-size: 23px;
  background: #d0d0d5;
  border: 3px solid #3b3b4f;
  border-radius: 6px;
}




/*
Set the footer background color to #2a2a40, and use Flexbox to horizontally center the text.
*/

footer {
  background-color:  #2a2a40;
  display: flex;
  justify-content: center;
}


/*
Target the footer and the anchor element within to set the font color to a color of adequate contrast ratio.
*/


footer, footer a {
  color: white;
}

/*
Horizontally center all the text within the address element, and add some padding
*/

address {
  text-align: center;
  padding: 10px;
}